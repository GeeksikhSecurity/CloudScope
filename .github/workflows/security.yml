name: Security Scan

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for dependency files
      id: check-deps
      run: |
        if [ -f "requirements.txt" ] || [ -f "package.json" ] || [ -f "go.mod" ]; then
          echo "has-deps=true" >> $GITHUB_OUTPUT
        else
          echo "has-deps=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Python
      if: steps.check-deps.outputs.has-deps == 'true' && hashFiles('requirements.txt') != ''
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pip-audit
      if: steps.check-deps.outputs.has-deps == 'true' && hashFiles('requirements.txt') != ''
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit
    
    - name: Run pip-audit
      if: steps.check-deps.outputs.has-deps == 'true' && hashFiles('requirements.txt') != ''
      run: |
        pip-audit --requirement requirements.txt --format=json --output=pip-audit-report.json
      continue-on-error: true
    
    - name: Upload pip-audit results
      if: steps.check-deps.outputs.has-deps == 'true' && hashFiles('requirements.txt') != ''
      uses: actions/upload-artifact@v4
      with:
        name: pip-audit-report
        path: pip-audit-report.json
    
    - name: Skip dependency scan
      if: steps.check-deps.outputs.has-deps == 'false'
      run: echo "No dependency files found - skipping scan (POC repository)"

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for Dockerfile
      id: check-docker
      run: |
        if [ -f "Dockerfile" ]; then
          echo "has-dockerfile=true" >> $GITHUB_OUTPUT
        else
          echo "has-dockerfile=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Build Docker image
      if: steps.check-docker.outputs.has-dockerfile == 'true'
      run: |
        docker build -t cloudscope:latest .
    
    - name: Run Trivy vulnerability scanner
      if: steps.check-docker.outputs.has-dockerfile == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'cloudscope:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy scan results to GitHub Security tab
      if: steps.check-docker.outputs.has-dockerfile == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Skip container scan
      if: steps.check-docker.outputs.has-dockerfile == 'false'
      run: echo "No Dockerfile found - skipping container scan (POC repository)"

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before }}
        head: ${{ github.sha }}
        extra_args: --debug --only-verified
      continue-on-error: true

  powershell-security-scan:
    name: PowerShell Security Scan
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for PowerShell files
      shell: powershell
      id: check-ps
      run: |
        $psFiles = Get-ChildItem -Path . -Recurse -Include *.ps1,*.psm1,*.psd1 -ErrorAction SilentlyContinue
        if ($psFiles.Count -gt 0) {
          echo "has-powershell=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "has-powershell=false" >> $env:GITHUB_OUTPUT
        }
    
    - name: Install PSScriptAnalyzer
      if: steps.check-ps.outputs.has-powershell == 'true'
      shell: powershell
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name PSScriptAnalyzer -Force
    
    - name: Run PSScriptAnalyzer security rules
      if: steps.check-ps.outputs.has-powershell == 'true'
      shell: powershell
      run: |
        $securityRules = @(
          'PSAvoidUsingPlainTextForPassword',
          'PSAvoidUsingConvertToSecureStringWithPlainText',
          'PSAvoidUsingUsernameAndPasswordParams',
          'PSAvoidUsingWMICmdlet',
          'PSUsePSCredentialType'
        )
        
        $results = Invoke-ScriptAnalyzer -Path ./powershell/ -IncludeRule $securityRules -Recurse -ErrorAction SilentlyContinue
        
        if ($results.Count -gt 0) {
          Write-Host "Security issues found:"
          $results | Format-Table
        } else {
          Write-Host "No security issues found"
        }
      continue-on-error: true
    
    - name: Skip PowerShell scan
      if: steps.check-ps.outputs.has-powershell == 'false'
      shell: powershell
      run: Write-Host "No PowerShell files found - skipping scan (POC repository)"

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for build artifacts
      id: check-artifacts
      run: |
        if [ -f "Dockerfile" ] || [ -f "requirements.txt" ] || [ -f "package.json" ] || [ -d "dist" ] || [ -d "build" ]; then
          echo "has-artifacts=true" >> $GITHUB_OUTPUT
        else
          echo "has-artifacts=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate SBOM
      if: steps.check-artifacts.outputs.has-artifacts == 'true'
      uses: anchore/sbom-action@v0
      with:
        path: ./
        format: spdx-json
        output-file: cloudscope-sbom.spdx.json
      continue-on-error: true
    
    - name: Upload SBOM
      if: steps.check-artifacts.outputs.has-artifacts == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: cloudscope-sbom
        path: cloudscope-sbom.spdx.json
    
    - name: Scan SBOM with Grype
      if: steps.check-artifacts.outputs.has-artifacts == 'true'
      uses: anchore/scan-action@v3
      with:
        sbom: cloudscope-sbom.spdx.json
        fail-build: false
        output-format: sarif
      continue-on-error: true
    
    - name: Upload vulnerability report
      if: steps.check-artifacts.outputs.has-artifacts == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
    
    - name: Skip SBOM generation
      if: steps.check-artifacts.outputs.has-artifacts == 'false'
      run: echo "No build artifacts found - skipping SBOM generation (POC repository)"

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, codeql-analysis, secret-scan, powershell-security-scan, sbom-generation]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate security summary
      run: |
        echo "# CloudScope Security Scan Summary" > security-summary.md
        echo "**Scan Date:** $(date)" >> security-summary.md
        echo "**Repository:** ${{ github.repository }}" >> security-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "- PowerShell Security: ${{ needs.powershell-security-scan.result }}" >> security-summary.md
        echo "- SBOM Generation: ${{ needs.sbom-generation.result }}" >> security-summary.md
        
        cat security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
