version: '3.8'

services:
  cloudscope:
    build:
      context: .
      dockerfile: Dockerfile
    image: cloudscope:latest
    container_name: cloudscope
    restart: unless-stopped
    ports:
      - "8080:8080"  # Metrics/API port
    environment:
      - CLOUDSCOPE_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CLOUDSCOPE_STORAGE_TYPE=${STORAGE_TYPE:-sqlite}
      # Cloud provider credentials (optional)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - GCP_SERVICE_ACCOUNT_KEY=${GCP_SERVICE_ACCOUNT_KEY}
      # Integration credentials (optional)
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - JIRA_URL=${JIRA_URL}
      - JIRA_API_TOKEN=${JIRA_API_TOKEN}
    volumes:
      - ./data:/data
      - ./logs:/logs
      - ./config:/config
      - ./plugins:/plugins
      - ./reports:/reports
    healthcheck:
      test: ["CMD", "cloudscope", "health", "--format", "json"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - cloudscope-network

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: cloudscope-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - cloudscope-network
    depends_on:
      - cloudscope

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cloudscope-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - cloudscope-network
    depends_on:
      - prometheus

  # Optional: Memgraph for graph database storage
  memgraph:
    image: memgraph/memgraph:latest
    container_name: cloudscope-memgraph
    restart: unless-stopped
    ports:
      - "7687:7687"  # Bolt protocol
      - "3001:3000"  # Memgraph Lab
    environment:
      - MEMGRAPH_USER=${MEMGRAPH_USER:-memgraph}
      - MEMGRAPH_PASSWORD=${MEMGRAPH_PASSWORD:-memgraph}
    volumes:
      - memgraph-data:/var/lib/memgraph
      - memgraph-logs:/var/log/memgraph
    networks:
      - cloudscope-network
    profiles:
      - graph

networks:
  cloudscope-network:
    driver: bridge

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  memgraph-data:
    driver: local
  memgraph-logs:
    driver: local
